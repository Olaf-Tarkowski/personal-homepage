{"version":3,"sources":["common/Greeting/index.js","common/Tiles/styled.js","common/Tiles/index.js","common/Tiles/Data/skillList.js","common/Tiles/Data/targetList.js","styled.js","App.js","reportWebVitals.js","GlobalStyle.js","index.js","theme.js"],"names":["Greeting","Tile","styled","div","theme","color","white","Title","h1","black","List","ul","indigo","ListItem","li","Line","span","Tiles","title","data","map","target","nanoid","skillList","targetList","StyledPage","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","GlobalStyle","createGlobalStyle","whiteLilac","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2LAQeA,EARE,WACb,OACI,sC,sBCAKC,EAAOC,IAAOC,IAAV,wDACO,qBAAGC,MAAkBC,MAAMC,SAGtCC,EAAQL,IAAOM,GAAV,kHACL,qBAAGJ,MAAkBC,MAAMI,SAM3BC,EAAOR,IAAOS,GAAV,+KAMJ,qBAAGP,MAAkBC,MAAMO,UAG3BC,EAAWX,IAAOY,GAAV,4BAGRC,EAAOb,IAAOc,KAAV,6CACJ,qBAAGZ,MAAkBC,MAAMI,SCNzBQ,EAjBD,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,KACpB,OACI,eAAClB,EAAD,WACI,cAACM,EAAD,UACKW,IAEL,cAACR,EAAD,UACKS,EAAKC,KAAI,SAAAC,GACN,OACI,cAACR,EAAD,UAAyB,cAACE,EAAD,UAAOM,KAAjBC,wBCaxBC,EAzBG,CACd,6BACA,wBACA,WACA,WACA,eACA,qBACA,WACA,cACA,eACA,aACA,kBACA,cACA,iBACA,kCACA,mBACA,wBACA,gCACA,SACA,QACA,MACA,QACA,OCbWC,EATI,CACf,gBACA,UACA,UACA,eACA,aACA,cCJSC,EAAavB,IAAOC,IAAV,4ECcRuB,I,EAAAA,EAVf,WACE,OACE,eAACD,EAAD,WACE,cAAC,EAAD,IACA,cAAC,EAAD,CAAOP,MAAO,uBAAwBC,KAAMI,IAC5C,cAAC,EAAD,CAAOL,MAAO,4BAA6BC,KAAMK,QCCxCG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCLDQ,EAAcC,YAAH,uPAUI,qBAAGjC,MAAkBC,MAAMiC,cCJvDC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,eAAC,IAAD,CAAerC,MCVE,CACjBC,MAAO,CACHC,MAAO,UACPgC,WAAY,UACZ7B,MAAO,UACPG,OAAQ,YDKZ,UACE,cAACwB,EAAD,IACA,cAAC,EAAD,SAGJM,SAASC,eAAe,SAM1BhB,M","file":"static/js/main.df3b3186.chunk.js","sourcesContent":["const Greeting = () => {\r\n    return (\r\n        <p>\r\n            lore\r\n        </p>\r\n    );\r\n};\r\n\r\nexport default Greeting;","import styled from \"styled-components\";\r\n\r\nexport const Tile = styled.div`\r\n    background-color: ${({ theme }) => theme.color.white};\r\n`;\r\n\r\nexport const Title = styled.h1`\r\n    color: ${({ theme }) => theme.color.black};\r\n    font-weight: 900;\r\n    font-size: 30px;\r\n    line-height: 36px;\r\n`;\r\n\r\nexport const List = styled.ul`\r\n    display: grid;\r\n    grid-template-columns: 1fr 1fr 1fr;\r\n    font-weight: 400;\r\n    font-size: 18px;\r\n    line-height: 25px;\r\n    color: ${({ theme }) => theme.color.indigo};\r\n`;\r\n\r\nexport const ListItem = styled.li`\r\n`;\r\n\r\nexport const Line = styled.span`\r\n    color: ${({ theme }) => theme.color.black};\r\n`;","import { nanoid } from \"@reduxjs/toolkit\";\r\nimport { Line, List, ListItem, Tile, Title } from \"./styled\";\r\n\r\nconst Tiles = ({ title, data }) => {\r\n    return (\r\n        <Tile>\r\n            <Title>\r\n                {title}\r\n            </Title>\r\n            <List>\r\n                {data.map(target => {\r\n                    return (\r\n                        <ListItem key={nanoid()}><Line>{target}</Line></ListItem>\r\n                    )\r\n                })}\r\n            </List>\r\n        </Tile>\r\n    );\r\n};\r\n\r\nexport default Tiles;","const skillList = [\r\n    \"Semantic & accessible HTML\",\r\n    \"Responsive Web Design\",\r\n    \"Teamwork\",\r\n    \"Markdown\",\r\n    \"Immutability\",\r\n    \"CSS BEM convention\",\r\n    \"CSS Grid\",\r\n    \"CSS Flexbox\",\r\n    \"React Router\",\r\n    \"Redux-Saga\",\r\n    \"Redux (Toolkit)\",\r\n    \"React Hooks\",\r\n    \"Error handling\",\r\n    \"Working with API (fetch, axios)\",\r\n    \"JavaScript: ES6+\",\r\n    \"Promises, Async/Await\",\r\n    \"GitHub Pull Requests & Review\",\r\n    \"Trello\",\r\n    \"Scrum\",\r\n    \"NPM\",\r\n    \"React\",\r\n    \"Git\"\r\n]\r\n\r\nexport default skillList;","const targetList = [\r\n    \"React Context\",\r\n    \"Node.js\",\r\n    \"Cypress\",\r\n    \"Unit testing\",\r\n    \"TypeScript\",\r\n    \"JS classes\"\r\n]\r\n\r\nexport default targetList;","import styled from \"styled-components\";\r\n\r\nexport const StyledPage = styled.div`\r\n    margin:115px auto;\r\n    max-width: 1216px;\r\n`;\r\n\r\n","import Greeting from \"./common/Greeting\";\nimport Tiles from \"./common/Tiles\";\nimport skillList from \"./common/Tiles/Data/skillList\";\nimport targetList from \"./common/Tiles/Data/targetList\";\nimport { StyledPage } from \"./styled\";\n\nfunction App() {\n  return (\n    <StyledPage>\n      <Greeting />\n      <Tiles title={\"My skillset includes\"} data={skillList} />\n      <Tiles title={\"What I want to learn next\"} data={targetList} />\n    </StyledPage>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n    html {\r\n        box-sizing: border-box;\r\n    }\r\n\r\n    *, ::after, ::before {\r\n        box-sizing: inherit;\r\n    }\r\n\r\n    body {\r\n        background-color: ${({ theme }) => theme.color.whiteLilac};\r\n        font-family: 'Inter', sans-serif;\r\n    }\r\n    `;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { GlobalStyle } from './GlobalStyle';\nimport { ThemeProvider } from 'styled-components';\nimport { theme } from './theme';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <GlobalStyle />\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","export const theme = {\r\n    color: {\r\n        white: \"#FFFFFF\",\r\n        whiteLilac: \"#FBFBFE\",\r\n        black: \"#000000\",\r\n        indigo: \"#3C6EC9\",\r\n    }\r\n}"],"sourceRoot":""}